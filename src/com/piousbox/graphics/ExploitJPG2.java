/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.piousbox.graphics;

import com.piousbox.ImageUtils;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.imageio.ImageIO;

/**
 *
 * @author ae1
 */
public class ExploitJPG2 extends Frame implements Runnable {

    Thread animation;
    int offset = 0;
    BufferedImage image = null;
    BufferedImage backup = null;
    byte[] bytes = null;
    InputStream is = null;
    Config c = new Config();
    int w, h;
    /**
     * how much crazy this algorithm is... I think. I don't know how this
     * affects the picture, actually.
     */
    int max = 300;
    Graphics g;

    public ExploitJPG2() {
        try {
            setTitle("ae1");

            backup = ImageUtils.loadBufferedImage(c.addr1);

            FileInputStream fis = null;

            File file = new File(c.addr1);
            BufferedImage img = ImageUtils.loadBufferedImage(c.addr1);
            w = img.getWidth();
            h = img.getHeight();
            fis = new FileInputStream(file);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readNum; (readNum = fis.read(buf)) != -1;) {
                bos.write(buf, 0, readNum);
            }

            bytes = bos.toByteArray();

            fis.close();
            this.addWindowListener(new WindowAdapter() {

                @Override
                public void windowClosing(WindowEvent windowEvent) {
                    System.exit(0);
                }
            });
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        setVisible(true);
        setSize(w, h);
//        setSize(100, 100);

        animation = new Thread(this);
        animation.start();

        image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        g = backup.createGraphics();
    }

    public static void main(String[] args) {
        new ExploitJPG2();
    }

    public void run() {
        while (true) {
            try {

//                process();

                int anyless = 3000;
                int crazy1 = 5000;
                int rndStart = c.rnd.nextInt((int) (bytes.length - anyless)) + anyless; // 3000 is a magic number in this case I think... things break is it's any less.
                int rndEnd = rndStart + c.rnd.nextInt(crazy1); // max is small, just for the offset in the loop.

//                for (int i = 2000; i < 2500 - max; i++) {
//                    bytes[i] = (bytes[i + c.rnd.nextInt(max)]);
//                }

//                for (int i = 3500; i < 4000 - max; i++) {
//                    bytes[i] = (bytes[i + c.rnd.nextInt(max)]);
//                }

                for (int i = 4000; i < 6500 - max; i++) {
                    bytes[i] = (bytes[i + c.rnd.nextInt(max)]);
                }

//                for (int i = 5000; i < 5500 - max; i++) {
//                    bytes[i] = (bytes[i + c.rnd.nextInt(max)]);
//                }

                // utility
                InputStream in = new ByteArrayInputStream(bytes);
                in.reset();
                image = ImageIO.read(in);


            } catch (IOException ex) {
//                image = ImageUtils.loadBufferedImage(c.addr1);
            }

            g.drawImage(image, 0, 0, this);

//            try {
//                Thread.sleep(c.rnd.nextInt(200) + 200);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(ExploitJPG2.class.getName()).log(Level.SEVERE, null, ex);
//            }
            repaint();
        }
    }


    int counter = 0;
    @Override
    public void update(Graphics g) {
        g.drawImage(backup, 0, 0, this);
        ImageUtils.saveImage(backup, c.dirOut +"a"+ counter++ + ".png");
//        g.drawImage(image, 0, 0, this);
    }
}
